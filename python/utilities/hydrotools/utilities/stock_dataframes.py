"""
================
Stock DataFrames
================
Methods to generate stock pandas.DataFrames for testing.

Methods
-------
random_dataframe

"""

import numpy as np
import pandas as pd
from typing import Union, List
from .hdf_cache import hdf_cache

@hdf_cache
def random_dataframe(
    start: Union[pd.Timestamp, str] = '1970-01-01T01',
    rows: int = 10,
    freq: Union[str, pd.tseries.offsets.DateOffset] = '1H',
    float_column_name: Union[str, List[str]] = ['value'],
    datetime_column_name: str = "value_time"
    ) -> pd.DataFrame:
    """Return a pandas.DataFrame with a single datetime column and an 
    arbitrary number of float columns containing random values generated by
    numpy.random.random(period).
    
    Parameters
    ----------
    start: str or datetime-like, optional, default "1970-01-01T01"
        First datetime in column named datetime_column_name
    rows: int, optional, default 10
        Number of rows to generate.
    freq: str or DateOffset, optional, default "1H"
        pandas compatible frequency alias. Indicates the frequency of the 
        datetime column.
    float_column_name: str or list of strings, optional, default ["value"]
        Array-like containing a list of column names used to generate the 
        float columns.
    datetime_column_name: str, optional, default "value_time"
        Column name to use for datetime column.
    hdf_cache_path: str, path object, pandas.HDFStore or file-like object, optional
        Path or buffer to writable/readable HDF5 file location to use as a 
        cache for processed pandas.DataFrames. Must also set hdf_cache_key.
    hdf_cache_key: str, optional
        Key used to store and retrieve pandas.DataFrame from an HDF5 file. This 
        functionality stores DataFrames as PyTables. Must also set 
        hdf_cache_path.

    Returns
    -------
    pandas.DataFrame
        DataFrame containing single datetime column and a float column of 
        random float values for every label in float_column_names.

    """
    # Generate times
    times = pd.date_range(
        start=start,
        periods=rows,
        freq=freq
    )

    # Set datetime column
    data = {datetime_column_name: times}

    # Generate float column(s)
    if type(float_column_name) == str:
        data[float_column_name] = np.random.random(rows)
    elif True:
        for col in float_column_name:
            data[col] = np.random.random(rows)

    # Generate DataFrame
    return pd.DataFrame(data)